* The STOCKS Application
The STOCKS Application is a complete full-stack web application,
  designed and built for my Computer Science capstone experience
  at Southern New Hampshire University.
The application consists of a back end server and front end web application
  in a single monorepo;
  both components are written in TypeScript,
  using modern, component-centered web application frameworks.

** Project Layout
Given the STOCKS Application's monorepo architecture,
  I recognize that it might be a little difficult to find things.
Here's a quick overview of where everything is.
I'll try to keep this updated if things change,
  but it's always going to occupy a lower priority rung than improving project code.

*** Overall Repo Structure
The repo uses a monorepo structure,
  which means that the front end, back end, and any supporting libraries
  exist within a single monolithic repository.
This makes sharing code and configuration between projects easier,
  and puts all of the important pieces in the same place.
Within the monorepo, there are a few important directories:
- ~apps~ :: runnable applications
- ~dist~ :: transpiled Javascript code for distribution/execution
- ~libs~ :: shared libraries used in one or more applications
The monorepo uses Nrwl's ~nx~ tooling,
  which simplifies the process of generating, maintaining, and executing code.
It adds a bit of overhead,
  which I don't love,
  but it made the new developer experience pretty self-explanatory,
  and the monorepo-specific tooling was invaluable.

**** The STOCKS server
The stocks server exists in ~apps/stocks-server~;
  it is written in Typescript using the Nest.js framework.
It implements the full API included in the original STOCKS application,
  as well as the new endpoints required for the WebSTOCKS application.

***** The Third-Party Marked Data Service
The aptly-named ~market-sync~ module adds a service
  which updates the stock data on the local server
  using data obtained from a third-party provider.
In its current form,
  the service pulls a list of stocks from the database
  and updates company overview or price history data
  for one stock every 12 seconds — the
  API request rate limit for our third-party provider, [[https://alphavantage.co/][AlphaVantage]].
Since the service is configured to pull daily stock data,
  we additionally schedule updates to occur at 01:00 UTC,
  which is about an hour after the NYSE's after-hours session closes in summer
  and right at close in the winter.

**** The ~StockInterface~ data model
The ~data~ library (~libs/data~) exports the ~StockInterface~ and ~IntervalInterface~;
  these interfaces enforce the data model across the application.
It also implements a ~Stock~ object,
  which provides a default and initialized constructor
  and the ~lastClose~ derived property.
The ~Stock~ object is used heavily within the WebSTOCKS client application.

**** WebSTOCKS
WebSTOCKS is a single-page client application for the STOCK REST API.
It's built using Angular,
  which is a Typescript-native component-based front end framework.
The application provides an interface
  which can utilize a number of the server's API endpoints.
Notably, the user can access:
- a list of all stocks in the database,
      which can be filtered by symbol
- a complete* stock detail view,
      including company overview data
      and a zoom-able candlestick chart showing price history
      (*volume data is not included)
- a component which allows users to query the upstream provider
      and add stocks from the list of results
- the ability to delete stocks from the database

Notably absent from the list above
  is any ability to create and manipulate stock data directly;
  this was an intentional choice,
  since the reliance on an upstream data provider
  and design of the application's UI
  signify a shift from the API's original purpose,
  which appeared to be creating and maintaining a database of securities data,
  to one that focused on analysis and decision-making.
Similarly, the Industry and Stock report functions have also been subsumed,
  the latter into the stock list in the database itself — which
  the user would, presumably, keep updated with stocks of interest.
Unfortunately,
  the new data model is not really compatible with the industry report.
Some future update may include a similar functionality,
  but it is, for now, a mostly-worthless API endpoint.

*** ~README.org~
I'm assuming you're familiar with READMEs,
  so I won't waste your time,
  but I want to comment a little on my choice of ~org-mode~ over Markdown.
Ultimately, both formats are exceptionally competent lightweight markup languages,
  and they're similar enough
  that the average programmer should be able to make sense of either.
However, ~org-mode~ is my personal preference;
  as an Emacs user,
  the editor tooling for ~org-mode~ is hands-down more pleasant,
  and I've written enough Markdown over the years
  that I'm not worried about trying to build comfort.
In fact, Markdown was once my preference for most writing,
  and you're welcome to check out [[https://github.com/seangllghr/makepaper][makepaper]],
  the collection of scripts I used to use to typeset Markdown
  into traditionally-formatted academic manuscripts.
I write my papers in ~org-mode~ and typeset exclusively with LaTeX now
  (XeLaTeX, if you want to be pedantic),
  but ~makepaper~ was one of my first adventures in server-side Javascript,
  so it's actually reasonable illustration of my growth with the language
  (please read this as “it is an abomination, but I have learned much since”).

I also wanted to comment about the formatting ~org-mode~ source.
I've taken to using a variation of [[https://sembr.org][Semantic Line Breaks]] in my prose,
  though some of the conventions I use are non-standard.
The specification's author provides a wonderfully concise explanation
  that I certainly won't improve upon:
#+begin_quote
/Semantic Line Breaks/ describe a set of conventions
  for using insensitive vertical whitespace
  to structure prose along semantic boundaries.

[…]

By inserting line breaks at semantic boundaries,
  writers, editors, and other collaborators
  can make source text easier to work with,
  without affecting how it's seen by readers.

  — Mattt, /Semantic Line Breaks/
#+end_quote
He goes on to describe a complete specification,
  and links to [[https://rhodesmill.org/brandon/2012/one-sentence-per-line/][another article]] tracing the idea back to Brian Kernighan.
I don't follow the spec exactly,
but it provides a great starting point.
Among the authorial benefits advanced by the author,
  semantic line breaking makes source-controlling text much easier.
Individual phrases and clauses take the role of lines of code,
  and indentation within sentences adds additional clarity
  to the document's semantic structure.
The result is text broken into predictable units,
  which controls the scope of Git commits
  by limiting the number of lines affected by a change.

I don't expect anyone else to be making substantial changes to this project
  (particularly not to the documentation)
  but, on the off chance someone stumbles on this and takes interest,
  the basic rules I follow are:
  - Avoid lines longer than ≈80 characters
  - Break lines at the following natural semantic boundaries
      (in descending order of preference):
    - at the end of each sentence
    - after commas
    - before and after longer parentheticals (> 30–40 characters)
      - for parentheticals set off with em dashes,
          break after the first word after the em dash
          to preserve spacing around the dash
        - In running prose,
            I prefer to space em dashes using Unicode thin spaces
        - If I can't use thin spaces,
            I prefer flush em dashes to word-spaced em dashes
            (Chicago style)
    - after inline lists
    - after a dependent clause (before the predicate verb)
  - Indent all lines that do not begin a new sentence by 4 spaces
